name: Build & test all configs

on: [push, pull_request]

jobs:

  build:
    strategy:
      matrix:
        crate:
          - vhdl_lang
          - vhdl_ls
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
        rust:
          - stable
          - 1.40.0 # MSRV

        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            ext: ''
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            ext: .exe

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v1

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Build ${{ matrix.crate }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path ${{ matrix.crate }}/Cargo.toml --release --target ${{ matrix.target }} --features "packaged"

      - name: Test ${{ matrix.crate }}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path ${{ matrix.crate }}/Cargo.toml --release --target ${{ matrix.target }} --features "packaged"

      - name: rustfmt
        if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --package ${{ matrix.crate }} -- --check

      - name: clippy
        if: matrix.os == 'ubuntu-latest'
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --package ${{ matrix.crate }} -- -D warnings

      - name: Upload vhdl_lang
        if: matrix.crate == 'vhdl_lang' && matrix.rust == 'stable'
        uses: actions/upload-artifact@v1
        with:
          name: vhdl_lang-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/vhdl_lang${{ matrix.ext }}

      - name: Assemble vhdl_ls
        if: matrix.crate == 'vhdl_ls' && matrix.rust == 'stable'
        run: |
          mkdir vhdl_ls-${{ matrix.target }}
          mkdir vhdl_ls-${{ matrix.target }}/bin
          cp -R vhdl_libraries vhdl_ls-${{ matrix.target }}
          cp target/${{ matrix.target }}/release/vhdl_ls${{ matrix.ext }} vhdl_ls-${{ matrix.target }}/bin

      - name: Upload vhdl_ls
        if: matrix.crate == 'vhdl_ls' && matrix.rust == 'stable'
        uses: actions/upload-artifact@v1
        with:
          name: vhdl_ls-${{ matrix.target }}
          path: vhdl_ls-${{ matrix.target }}
